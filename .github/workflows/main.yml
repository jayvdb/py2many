name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
jobs:
  build:

    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - macos-10.15
          - windows-2019
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Check for runner dependencies
        shell: bash
        run: |
          echo "WHICH_V=$(which v 2>/dev/null)" >> $GITHUB_ENV

      - uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 15

      - name: Add missing dependencies on act Medium runner
        if: ${{ env.ACT }}
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
              cargo \
              clang-12 \
              clang-format \
              powershell \
              rustfmt \
            && true
          echo "::add-path::${HOME}/.cargo/bin/"

      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - uses: julia-actions/setup-julia@v1
      - uses: fwilhe2/setup-kotlin@main
      - uses: jiro4989/setup-nim-action@v1
      - uses: actions/setup-go@v2
        # Needed as https://github.com/actions/setup-go/pull/89 is not merged
        with:
          go-version: '1.15'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install V
        if: ${{ !env.WHICH_V }}
        shell: bash
        env:
          RELEASE: weekly.2021.29
        run: |
          FILE=v_$(echo ${RUNNER_OS} | tr '[:upper:]' '[:lower:]').zip
          (cd /tmp && curl -sSLO https://github.com/vlang/v/releases/download/${RELEASE}/${FILE})
          (cd /tmp && unzip ${FILE})
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "::add-path::/tmp/v"
          else
            (cd /usr/local/bin && sudo ln -s /tmp/v/v)
          fi

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2

      - name: Install go packages
        shell: bash
        run: |
          go get github.com/hgfischer/go-iter
          go get github.com/google/go-cmp/cmp
          go get github.com/adsharma/py2many/pygo/runtime
          go get github.com/mgechev/revive
          if [[ -d /usr/local/bin && ! -f /usr/local/bin/golint && -f $HOME/go/bin/golint ]]; then
            (cd /usr/local/bin && sudo ln -fs $HOME/go/bin/golint)
          fi

      - name: Install tox
        run: |
          pip3 --version
          pip3 install setuptools tox

      - name: Install Julia packages
        shell: bash
        run: |
          julia -e 'using Pkg; Pkg.add("JuliaFormatter")'
          julia -e 'using Pkg; Pkg.add("SuperEnum")'
          if [[ -d /usr/local/bin && ! -f /usr/local/bin/format.jl ]]; then
            (cd /usr/local/bin && sudo ln -fs $(find ~/.julia -name format.jl))
          fi

      - name: Install dependencies for ${{ runner.os }}.
        shell: bash
        run: |
          set -ex
          which v ||:
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get install --yes \
                  astyle \
                  libc++-12-dev \
                  libc++abi-12-dev \
                  z3 \
                && true
              echo "CXX=clang++-12" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew tap holgerbrandl/tap https://github.com/holgerbrandl/homebrew-tap
              brew install astyle clang-format cljstyle kscript ktlint z3
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install zip curl astyle llvm
          fi
          echo "WHICH_CLJSTYLE=$(which cljstyle 2>/dev/null)" >> $GITHUB_ENV
          echo "WHICH_KSCRIPT=$(which kscript 2>/dev/null)" >> $GITHUB_ENV
          echo "WHICH_KTLINT=$(which ktlint 2>/dev/null)" >> $GITHUB_ENV

      - name: Install kscript
        if: ${{ !env.WHICH_KSCRIPT }}
        shell: bash
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install kscript

      - name: Install ktlint
        if: ${{ !env.WHICH_KTLINT }}
        shell: bash
        env:
          KTLINT_VERSION: 0.41.0
        run: |
          curl -sSLO https://github.com/pinterest/ktlint/releases/download/${KTLINT_VERSION}/ktlint
          if [ "$RUNNER_OS" == "Windows" ]; then
            mkdir /tmp/ktlint
            mv ktlint /tmp/ktlint/ktlint.jar
            curl -sSLO https://github.com/lordmulder/Launch5j/releases/download/0.7.0/launch5j-bin.2020-10-05.zip
            unzip launch5j-bin.2020-10-05.zip
            mv launch5j_x86_nogui.exe /tmp/ktlint/ktlint.exe
            echo "::add-path::/tmp/ktlint"
          else
            chmod a+x ktlint
            sudo mv ktlint /usr/local/bin/
          fi

      - name: Install dart dependencies
        shell: bash
        run: |
          dart --version
          # tests/build here must be the same as defined in test_cli
          if [[ ! -d tests/build ]]; then
            dart create --no-pub -t package-simple tests/build
          fi
          cd tests/build
          if ! grep vnum pubspec.yaml ; then
            # Specifying the version here doesnt stick
            set -ex
            dart pub add collection:1.15.0
            cat pubspec.yaml
            dart pub add sprintf
            dart pub add tuple
            cat pubspec.yaml
            sed -i.bak '/test:/d' pubspec.yaml
            # Force version downgrade here
            sed -i.bak 's:1.16.0:1.15.0:' pubspec.yaml
            flutter pub add vnum
          fi

      - name: Install cargo-script
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall cargo-script

      - name: Install smt dependency cljstyle (Linux)
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            (curl -sLO https://raw.githubusercontent.com/greglook/cljstyle/main/script/install-cljstyle
             sed -i.bak 's/--overwrite//' install-cljstyle
             chmod +x install-cljstyle
             sudo ./install-cljstyle)
          fi

      - name: Run tox
        shell: bash
        run: |
          if [[ -f $HOME/.sdkman/bin/sdkman-init.sh ]]; then
            source "$HOME/.sdkman/bin/sdkman-init.sh"
          fi
          if [ "$RUNNER_OS" == "Windows" ]; then
            export PATH="$PATH:/tmp/v"
          fi
          tox

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install linters
        run: pip install black pyflakes cpplint

      - name: Remove tests/cases/*.py & tests/expected/*.py
        run: rm tests/cases/*.py tests/expected/*.py tests/dir_cases/test1-*-expected/*.py

      - name: Run black
        run: black --check */ *.py

      - name: Run pyflakes
        run: pyflakes */ *.py

      - name: Run cpplint
        run: cpplint --filter=-legal/copyright,-whitespace/semicolon,-runtime/reference tests/expected/*.cpp
